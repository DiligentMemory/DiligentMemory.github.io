(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{477:function(s,t,a){"use strict";a.r(t);var n=a(2),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"索引介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引介绍"}},[s._v("#")]),s._v(" 索引介绍")]),s._v(" "),t("p",[t("strong",[s._v("索引是一种用于快速查询和检索数据的数据结构，其本质可以看成是一种排序好的数据结构。")])]),s._v(" "),t("p",[s._v("索引的作用就相当于书的目录。打个比方: 我们在查字典的时候，如果没有目录，那我们就只能一页一页的去找我们需要查的那个字，速度很慢。如果有目录了，我们只需要先去目录里查找字的位置，然后直接翻到那一页就行了。")]),s._v(" "),t("p",[s._v("索引底层数据结构存在很多种类型，常见的索引结构有: "),t("code",[s._v("B 树")]),s._v("， "),t("code",[s._v("B+树")]),s._v(" 和 "),t("code",[s._v("Hash")]),s._v("、"),t("code",[s._v("红黑树")]),s._v("。在 MySQL 中，无论是 Innodb 还是 MyIsam，都使用了 B+树作为索引结构。")]),s._v(" "),t("h2",{attrs:{id:"索引的优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引的优缺点"}},[s._v("#")]),s._v(" 索引的优缺点")]),s._v(" "),t("p",[t("strong",[s._v("优点")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("使用索引可以大大加快 数据的检索速度（大大减少检索的数据量）, 这也是创建索引的最主要的原因。")]),s._v(" "),t("li",[s._v("通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。")])]),s._v(" "),t("p",[t("strong",[s._v("缺点")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("创建索引和维护索引需要耗费许多时间。当对表中的数据进行增删改的时候，如果数据有索引，那么索引也需要动态的修改，会降低 SQL 执行效率。")]),s._v(" "),t("li",[s._v("索引需要使用物理文件存储，也会耗费一定空间。")])]),s._v(" "),t("p",[s._v("但是，"),t("strong",[s._v("使用索引一定能提高查询性能吗?")])]),s._v(" "),t("p",[s._v("大多数情况下，索引查询都是比全表扫描要快的。但是如果数据库的数据量不大，那么使用索引也不一定能够带来很大提升。")]),s._v(" "),t("h2",{attrs:{id:"索引底层数据结构选型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引底层数据结构选型"}},[s._v("#")]),s._v(" 索引底层数据结构选型")]),s._v(" "),t("h3",{attrs:{id:"hash表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hash表"}},[s._v("#")]),s._v(" Hash表")]),s._v(" "),t("p",[s._v("哈希表是键值对的集合，通过键(key)即可快速取出对应的值(value)，因此哈希表可以快速检索数据（接近 O（1））。")]),s._v(" "),t("p",[t("strong",[s._v("为何能够通过 key 快速取出 value 呢？")]),s._v(" 原因在于 "),t("strong",[s._v("哈希算法")]),s._v("（也叫散列算法）。通过哈希算法，我们可以快速找到 key 对应的 index，找到了 index 也就找到了对应的 value。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("hash "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hashfunc")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nindex "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hash "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" array_size\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://blog-images-luke.oss-cn-shanghai.aliyuncs.com/test/202311032115787.png",alt:"img"}})]),s._v(" "),t("p",[s._v("但是！哈希算法有个 "),t("strong",[s._v("Hash 冲突")]),s._v(" 问题，也就是说多个不同的 key 最后得到的 index 相同。通常情况下，我们常用的解决办法是 "),t("strong",[s._v("链地址法")]),s._v("。链地址法就是将哈希冲突数据存放在链表中。就比如 JDK1.8 之前 "),t("code",[s._v("HashMap")]),s._v(" 就是通过链地址法来解决哈希冲突的。不过，JDK1.8 以后"),t("code",[s._v("HashMap")]),s._v("为了减少链表过长的时候搜索时间过长引入了红黑树。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://blog-images-luke.oss-cn-shanghai.aliyuncs.com/test/202311032115034.png",alt:"img"}})]),s._v(" "),t("p",[s._v("为了减少 Hash 冲突的发生，一个好的哈希函数应该“均匀地”将数据分布在整个可能的哈希值集合中。")]),s._v(" "),t("p",[s._v("MySQL 的 InnoDB 存储引擎不直接支持常规的哈希索引，但是，InnoDB 存储引擎中存在一种特殊的“自适应哈希索引”（Adaptive Hash Index），自适应哈希索引并不是传统意义上的纯哈希索引，而是结合了 B+Tree 和哈希索引的特点，以便更好地适应实际应用中的数据访问模式和性能需求。自适应哈希索引的每个哈希桶实际上是一个小型的 B+Tree 结构。这个 B+Tree 结构可以存储多个键值对，而不仅仅是一个键。这有助于减少哈希冲突链的长度，提高了索引的效率。")]),s._v(" "),t("p",[s._v("既然哈希表这么快，"),t("strong",[s._v("为什么 MySQL 没有使用其作为索引的数据结构呢？")]),s._v(" 主要是因为 Hash 索引不支持顺序和范围查询。假如我们要对表中的数据进行排序或者进行范围查询，那 Hash 索引可就不行了。并且，每次 IO 只能取一个。")]),s._v(" "),t("p",[s._v("试想一种情况:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" tb1 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("在这种范围查询中，优势非常大，直接遍历比 500 小的叶子节点就够了。而 Hash 索引是根据 hash 算法来定位的，难不成还要把 1 - 499 的数据，每个都进行一次 hash 计算来定位吗?这就是 Hash 最大的缺点了。")]),s._v(" "),t("h3",{attrs:{id:"二叉查找树-bst"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二叉查找树-bst"}},[s._v("#")]),s._v(" 二叉查找树(BST)")]),s._v(" "),t("p",[s._v("二叉查找树（Binary Search Tree）是一种基于二叉树的数据结构，它具有以下特点：")]),s._v(" "),t("ol",[t("li",[s._v("左子树所有节点的值均小于根节点的值。")]),s._v(" "),t("li",[s._v("右子树所有节点的值均大于根节点的值。")]),s._v(" "),t("li",[s._v("左右子树也分别为二叉查找树。")])]),s._v(" "),t("p",[s._v("当二叉查找树是平衡的时候，也就是树的每个节点的左右子树深度相差不超过 1 的时候，查询的时间复杂度为 O(log2(N))，具有比较高的效率。然而，当二叉查找树不平衡时，例如在最坏情况下（有序插入节点），树会退化成线性链表（也被称为斜树），导致查询效率急剧下降，时间复杂退化为 O（N）。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://blog-images-luke.oss-cn-shanghai.aliyuncs.com/test/202311032124017.png",alt:"image-20231103212448985"}})]),s._v(" "),t("p",[s._v("也就是说，"),t("strong",[s._v("二叉查找树的性能非常依赖于它的平衡程度，这就导致其不适合作为 MySQL 底层索引的数据结构。")])]),s._v(" "),t("p",[s._v("为了解决这个问题，并提高查询效率，人们发明了多种在二叉查找树基础上的改进型数据结构，如平衡二叉树、B-Tree、B+Tree 等。")]),s._v(" "),t("h3",{attrs:{id:"avl-树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avl-树"}},[s._v("#")]),s._v(" AVL 树")]),s._v(" "),t("p",[s._v("AVL 树是计算机科学中最早被发明的自平衡二叉查找树，它的名称来自于发明者 G.M. Adelson-Velsky 和 E.M. Landis 的名字缩写。AVL 树的特点是保证任何节点的左右子树高度之差不超过 1，因此也被称为高度平衡二叉树，它的查找、插入和删除在平均和最坏情况下的时间复杂度都是 O(logn)。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://blog-images-luke.oss-cn-shanghai.aliyuncs.com/test/202311032125339.png",alt:"AVL 树"}})]),s._v(" "),t("p",[s._v("AVL 树采用了旋转操作来保持平衡。主要有四种旋转操作：LL 旋转、RR 旋转、LR 旋转和 RL 旋转。其中 LL 旋转和 RR 旋转分别用于处理左左和右右失衡，而 LR 旋转和 RL 旋转则用于处理左右和右左失衡。")]),s._v(" "),t("p",[s._v("由于 AVL 树需要频繁地进行旋转操作来保持平衡，因此会有较大的计算开销进而降低了查询性能。并且， 在使用 AVL 树时，每个树节点仅存储一个数据，而每次进行磁盘 IO 时只能读取一个节点的数据，如果需要查询的数据分布在多个节点上，那么就需要进行多次磁盘 IO。 "),t("strong",[s._v("磁盘 IO 是一项耗时的操作，在设计数据库索引时，我们需要优先考虑如何最大限度地减少磁盘 IO 操作的次数。")])]),s._v(" "),t("p",[s._v("实际应用中，AVL 树使用的并不多。")]),s._v(" "),t("h3",{attrs:{id:"红黑树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#红黑树"}},[s._v("#")]),s._v(" 红黑树")]),s._v(" "),t("p",[s._v("红黑树是一种自平衡二叉查找树，通过在插入和删除节点时进行颜色变换和旋转操作，使得树始终保持平衡状态，它具有以下特点：")]),s._v(" "),t("ol",[t("li",[s._v("每个节点非红即黑；")]),s._v(" "),t("li",[s._v("根节点总是黑色的；")]),s._v(" "),t("li",[s._v("每个叶子节点都是黑色的空节点（NIL 节点）；")]),s._v(" "),t("li",[s._v("如果节点是红色的，则它的子节点必须是黑色的（反之不一定）；")]),s._v(" "),t("li",[s._v("从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://blog-images-luke.oss-cn-shanghai.aliyuncs.com/test/202311032126713.png",alt:"红黑树"}})]),s._v(" "),t("p",[s._v("和 AVL 树不同的是，红黑树并不追求严格的平衡，而是大致的平衡。正因如此，红黑树的查询效率稍有下降，因为红黑树的平衡性相对较弱，可能会导致树的高度较高，这可能会导致一些数据需要进行多次磁盘 IO 操作才能查询到，这也是 MySQL 没有选择红黑树的主要原因。也正因如此，红黑树的插入和删除操作效率大大提高了，因为红黑树在插入和删除节点时只需进行 O(1) 次数的旋转和变色操作，即可保持基本平衡状态，而不需要像 AVL 树一样进行 O(logn) 次数的旋转操作。")]),s._v(" "),t("p",[t("strong",[s._v("红黑树的应用还是比较广泛的，TreeMap、TreeSet 以及 JDK1.8 的 HashMap 底层都用到了红黑树。对于数据在内存中的这种情况来说，红黑树的表现是非常优异的。")])]),s._v(" "),t("h3",{attrs:{id:"b-树-b-树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#b-树-b-树"}},[s._v("#")]),s._v(" B 树& B+树")]),s._v(" "),t("p",[s._v("B 树也称 B-树,全称为 "),t("strong",[s._v("多路平衡查找树")]),s._v(" ，俗称矮胖树，B+ 树是 B 树的一种变体。B 树和 B+树中的 B 是 "),t("code",[s._v("Balanced")]),s._v(" （平衡）的意思。")]),s._v(" "),t("p",[s._v("目前大部分数据库系统及文件系统都采用 B-Tree 或其变种 B+Tree 作为索引结构。")]),s._v(" "),t("p",[t("strong",[s._v("B 树& B+树两者有何异同呢？")])]),s._v(" "),t("ul",[t("li",[s._v("B 树的所有节点既存放键(key) 也存放数据(data)，而 B+树只有叶子节点存放 key 和 data，其他内节点只存放 key。")]),s._v(" "),t("li",[s._v("B 树的叶子节点都是独立的;B+树的叶子节点有一条引用链指向与它相邻的叶子节点。")]),s._v(" "),t("li",[s._v("B 树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而 B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。")]),s._v(" "),t("li",[s._v("在 B 树中进行范围查询时，首先找到要查找的下限，然后对 B 树进行中序遍历，直到找到查找的上限；而 B+树的范围查询，只需要对链表进行遍历即可。")])]),s._v(" "),t("p",[s._v("综上，B+树与 B 树相比，具备更少的 IO 次数、更稳定的查询效率和更适于范围查询这些优势。")]),s._v(" "),t("h2",{attrs:{id:"索引类型总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引类型总结"}},[s._v("#")]),s._v(" 索引类型总结")]),s._v(" "),t("p",[s._v("按照数据结构维度划分：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("BTree 索引：MySQL 里默认和最常用的索引类型。只有叶子节点存储 value，非叶子节点只有指针和 key。存储引擎 MyISAM 和 InnoDB 实现 BTree 索引都是使用 B+Tree，但二者实现方式不一样（前面已经介绍了）。")])]),s._v(" "),t("li",[t("p",[s._v("哈希索引：类似键值对的形式，一次即可定位。")])]),s._v(" "),t("li",[t("p",[s._v("RTree 索引：一般不会使用，仅支持 geometry 数据类型，优势在于范围查找，效率较低，通常使用搜索引擎如 ElasticSearch 代替。")])]),s._v(" "),t("li",[t("p",[s._v("全文索引：对文本的内容进行分词，进行搜索。目前只有 "),t("code",[s._v("CHAR")]),s._v("、"),t("code",[s._v("VARCHAR")]),s._v(" ，"),t("code",[s._v("TEXT")]),s._v(" 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。")])])]),s._v(" "),t("p",[s._v("按照底层存储方式角度划分：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("聚簇索引（聚集索引）：索引结构和数据一起存放的索引，InnoDB 中的主键索引就属于聚簇索引。")])]),s._v(" "),t("li",[t("p",[s._v("非聚簇索引（非聚集索引）：索引结构和数据分开存放的索引，二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。")])])]),s._v(" "),t("p",[s._v("按照应用维度划分：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("主键索引：加速查询 + 列值唯一（不可以有 NULL）+ 表中只有一个。")])]),s._v(" "),t("li",[t("p",[s._v("普通索引：仅加速查询。")])]),s._v(" "),t("li",[t("p",[s._v("唯一索引：加速查询 + 列值唯一（可以有 NULL）。")])]),s._v(" "),t("li",[t("p",[s._v("覆盖索引：一个索引包含（或者说覆盖）所有需要查询的字段的值。")])]),s._v(" "),t("li",[t("p",[s._v("联合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并。")])]),s._v(" "),t("li",[t("p",[s._v("全文索引：对文本的内容进行分词，进行搜索。目前只有 "),t("code",[s._v("CHAR")]),s._v("、"),t("code",[s._v("VARCHAR")]),s._v(" ，"),t("code",[s._v("TEXT")]),s._v(" 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。")])])]),s._v(" "),t("p",[s._v("MySQL 8.x 中实现的索引新特性：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("隐藏索引：也称为不可见索引，不会被优化器使用，但是仍然需要维护，通常会软删除和灰度发布的场景中使用。主键不能设置为隐藏（包括显式设置或隐式设置）。")])]),s._v(" "),t("li",[t("p",[s._v("降序索引：之前的版本就支持通过 desc 来指定索引为降序，但实际上创建的仍然是常规的升序索引。直到 MySQL 8.x 版本才开始真正支持降序索引。另外，在 MySQL 8.x 版本中，不再对 GROUP BY 语句进行隐式排序。")])]),s._v(" "),t("li",[t("p",[s._v("函数索引：从 MySQL 8.0.13 版本开始支持在索引中使用函数或者表达式的值，也就是在索引中可以包含函数或者表达式。")])])]),s._v(" "),t("h2",{attrs:{id:"主键索引-primary-key"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主键索引-primary-key"}},[s._v("#")]),s._v(" 主键索引(Primary Key)")]),s._v(" "),t("p",[s._v("数据表的主键列使用的就是主键索引。")]),s._v(" "),t("p",[s._v("一张数据表有只能有一个主键，并且主键不能为 null，不能重复。")]),s._v(" "),t("p",[s._v("在 MySQL 的 InnoDB 的表中，当没有显示的指定表的主键时，InnoDB 会自动先检查表中是否有唯一索引且不允许存在 null 值的字段，如果有，则选择该字段为默认的主键，否则 InnoDB 将会自动创建一个 6Byte 的自增主键。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://blog-images-luke.oss-cn-shanghai.aliyuncs.com/test/202311032137162.png",alt:"主键索引"}})]),s._v(" "),t("h2",{attrs:{id:"二级索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二级索引"}},[s._v("#")]),s._v(" 二级索引")]),s._v(" "),t("p",[t("strong",[s._v("二级索引（Secondary Index）又称为辅助索引，是因为二级索引的叶子节点存储的数据是主键。也就是说，通过二级索引，可以定位主键的位置。")])]),s._v(" "),t("p",[s._v("唯一索引，普通索引，前缀索引等索引属于二级索引。")]),s._v(" "),t("p",[s._v("PS: 不懂的同学可以暂存疑，慢慢往下看，后面会有答案的，也可以自行搜索。")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("唯一索引(Unique Key)")]),s._v(":唯一索引也是一种约束。唯一索引的属性列不能出现重复的数据，但是允许数据为 NULL，一张表允许创建多个唯一索引。 建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性，而不是为了查询效率。")]),s._v(" "),t("li",[t("strong",[s._v("普通索引(Index)")]),s._v(":普通索引的唯一作用就是为了快速查询数据，一张表允许创建多个普通索引，并允许数据重复和 NULL。")]),s._v(" "),t("li",[t("strong",[s._v("前缀索引(Prefix)")]),s._v(":前缀索引只适用于字符串类型的数据。前缀索引是对文本的前几个字符创建索引，相比普通索引建立的数据更小， 因为只取前几个字符。")]),s._v(" "),t("li",[t("strong",[s._v("全文索引(Full Text)")]),s._v(":全文索引主要是为了检索大文本数据中的关键字的信息，是目前搜索引擎数据库使用的一种技术。Mysql5.6 之前只有 MYISAM 引擎支持全文索引，5.6 之后 InnoDB 也支持了全文索引。")])]),s._v(" "),t("p",[s._v("二级索引:")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://blog-images-luke.oss-cn-shanghai.aliyuncs.com/test/202311032138916.png",alt:"二级索引"}})]),s._v(" "),t("h2",{attrs:{id:"聚簇索引与非聚簇索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#聚簇索引与非聚簇索引"}},[s._v("#")]),s._v(" 聚簇索引与非聚簇索引")]),s._v(" "),t("h3",{attrs:{id:"聚簇索引-聚集索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#聚簇索引-聚集索引"}},[s._v("#")]),s._v(" 聚簇索引（聚集索引）")]),s._v(" "),t("p",[t("strong",[s._v("聚簇索引（Clustered Index）即索引结构和数据一起存放的索引，并不是一种单独的索引类型。InnoDB 中的主键索引就属于聚簇索引。")])]),s._v(" "),t("p",[s._v("在 MySQL 中，InnoDB 引擎的表的 "),t("code",[s._v(".ibd")]),s._v("文件就包含了该表的索引和数据，对于 InnoDB 引擎表来说，该表的索引(B+树)的每个非叶子节点存储索引，叶子节点存储索引和索引对应的数据。")]),s._v(" "),t("p",[t("strong",[s._v("聚簇索引的优缺点")])]),s._v(" "),t("p",[t("strong",[s._v("优点")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("查询速度非常快")]),s._v("：聚簇索引的查询速度非常的快，因为整个 B+树本身就是一颗多叉平衡树，叶子节点也都是有序的，定位到索引的节点，就相当于定位到了数据。相比于非聚簇索引， 聚簇索引少了一次读取数据的 IO 操作。")]),s._v(" "),t("li",[t("strong",[s._v("对排序查找和范围查找优化")]),s._v("：聚簇索引对于主键的排序查找和范围查找速度非常快。")])]),s._v(" "),t("p",[t("strong",[s._v("缺点")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("依赖于有序的数据")]),s._v("：因为 B+树是多路平衡树，如果索引的数据不是有序的，那么就需要在插入时排序，如果数据是整型还好，否则类似于字符串或 UUID 这种又长又难比较的数据，插入或查找的速度肯定比较慢。")]),s._v(" "),t("li",[t("strong",[s._v("更新代价大")]),s._v("：如果对索引列的数据被修改时，那么对应的索引也将会被修改，而且聚簇索引的叶子节点还存放着数据，修改代价肯定是较大的，所以对于主键索引来说，主键一般都是不可被修改的。")])]),s._v(" "),t("h3",{attrs:{id:"非聚簇索引-非聚集索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非聚簇索引-非聚集索引"}},[s._v("#")]),s._v(" 非聚簇索引（非聚集索引）")]),s._v(" "),t("h4",{attrs:{id:"非聚簇索引介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非聚簇索引介绍"}},[s._v("#")]),s._v(" 非聚簇索引介绍")]),s._v(" "),t("p",[t("strong",[s._v("非聚簇索引(Non-Clustered Index)即索引结构和数据分开存放的索引，并不是一种单独的索引类型。二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。")])]),s._v(" "),t("p",[s._v("非聚簇索引的叶子节点并不一定存放数据的指针，因为二级索引的叶子节点就存放的是主键，根据主键再回表查数据。")]),s._v(" "),t("p",[t("strong",[s._v("非聚簇索引的优缺点")])]),s._v(" "),t("p",[t("strong",[s._v("优点")]),s._v("：")]),s._v(" "),t("p",[s._v("更新代价比聚簇索引要小 。非聚簇索引的更新代价就没有聚簇索引那么大了，非聚簇索引的叶子节点是不存放数据的")]),s._v(" "),t("p",[t("strong",[s._v("缺点")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("依赖于有序的数据")]),s._v(":跟聚簇索引一样，非聚簇索引也依赖于有序的数据")]),s._v(" "),t("li",[t("strong",[s._v("可能会二次查询(回表)")]),s._v(":这应该是非聚簇索引最大的缺点了。 当查到索引对应的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询。")])]),s._v(" "),t("p",[s._v("这是 MySQL 的表的文件截图:")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://blog-images-luke.oss-cn-shanghai.aliyuncs.com/test/202311032141544.png",alt:"MySQL 表的文件"}})]),s._v(" "),t("p",[s._v("聚簇索引和非聚簇索引:")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://blog-images-luke.oss-cn-shanghai.aliyuncs.com/test/202311032142666.png",alt:"image-20231103214229613"}})]),s._v(" "),t("h4",{attrs:{id:"非聚簇索引一定回表查询吗-覆盖索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非聚簇索引一定回表查询吗-覆盖索引"}},[s._v("#")]),s._v(" 非聚簇索引一定回表查询吗(覆盖索引)?")]),s._v(" "),t("p",[t("strong",[s._v("非聚簇索引不一定回表查询。")])]),s._v(" "),t("p",[s._v("试想一种情况，用户准备使用 SQL 查询用户名，而用户名字段正好建立了索引。")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'guang19'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("那么这个索引的 key 本身就是 name，查到对应的 name 直接返回就行了，无需回表查询。")]),s._v(" "),t("p",[s._v("即使是 MYISAM 也是这样，虽然 MYISAM 的主键索引确实需要回表，因为它的主键索引的叶子节点存放的是指针。但是！"),t("strong",[s._v("如果 SQL 查的就是主键呢?")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" id"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("主键索引本身的 key 就是主键，查到返回就行了。这种情况就称之为覆盖索引了。")]),s._v(" "),t("h2",{attrs:{id:"覆盖索引和联合索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#覆盖索引和联合索引"}},[s._v("#")]),s._v(" 覆盖索引和联合索引")]),s._v(" "),t("h3",{attrs:{id:"覆盖索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#覆盖索引"}},[s._v("#")]),s._v(" 覆盖索引")]),s._v(" "),t("p",[s._v("如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称之为 "),t("strong",[s._v("覆盖索引（Covering Index）")]),s._v(" 。我们知道在 InnoDB 存储引擎中，如果不是主键索引，叶子节点存储的是主键+列值。最终还是要“回表”，也就是要通过主键再查找一次，这样就会比较慢。而覆盖索引就是把要查询出的列和索引是对应的，不做回表操作！")]),s._v(" "),t("p",[t("strong",[s._v("覆盖索引即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了，而无需回表查询。")])]),s._v(" "),t("blockquote",[t("p",[s._v("如主键索引，如果一条 SQL 需要查询主键，那么正好根据主键索引就可以查到主键。再如普通索引，如果一条 SQL 需要查询 name，name 字段正好有索引， 那么直接根据这个索引就可以查到数据，也无需回表。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://blog-images-luke.oss-cn-shanghai.aliyuncs.com/test/202311032143266.png",alt:"image-20231103214332223"}})]),s._v(" "),t("p",[s._v("我们这里简单演示一下覆盖索引的效果。")]),s._v(" "),t("p",[s._v("1、创建一个名为 "),t("code",[s._v("cus_order")]),s._v(" 的表，来实际测试一下这种排序方式。为了测试方便， "),t("code",[s._v("cus_order")]),s._v(" 这张表只有 "),t("code",[s._v("id")]),s._v("、"),t("code",[s._v("score")]),s._v("、"),t("code",[s._v("name")]),s._v("这 3 个字段。")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("cus_order"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AUTO_INCREMENT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("score"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("varchar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRIMARY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENGINE")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("InnoDB")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AUTO_INCREMENT")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CHARSET")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("utf8mb4"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("2、定义一个简单的存储过程（PROCEDURE）来插入 100w 测试数据。")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DELIMITER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFINER")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@`%`")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PROCEDURE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("BatchinsertDataToCusOder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),s._v(" start_num "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),s._v(" max_num "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BEGIN")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DECLARE")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" start_num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHILE")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" max_num "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DO")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("insert")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("into")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("cus_order"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("score"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("values")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("RAND"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("CONCAT"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'user'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("END")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHILE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("END")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DELIMITER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("存储过程定义完成之后，我们执行存储过程即可！")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CALL")]),s._v(" BatchinsertDataToCusOder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 插入100w+的随机数据")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("等待一会，100w 的测试数据就插入完成了！")]),s._v(" "),t("p",[s._v("3、创建覆盖索引并使用 "),t("code",[s._v("EXPLAIN")]),s._v(" 命令分析。")]),s._v(" "),t("p",[s._v("为了能够对这 100w 数据按照 "),t("code",[s._v("score")]),s._v(" 进行排序，我们需要执行下面的 SQL 语句。")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("score"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("cus_order"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("score"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#降序排序")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("使用 "),t("code",[s._v("EXPLAIN")]),s._v(" 命令分析这条 SQL 语句，通过 "),t("code",[s._v("Extra")]),s._v(" 这一列的 "),t("code",[s._v("Using filesort")]),s._v(" ，我们发现是没有用到覆盖索引的。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://blog-images-luke.oss-cn-shanghai.aliyuncs.com/test/202311032149067.png",alt:"img"}})]),s._v(" "),t("p",[s._v("不过这也是理所应当，毕竟我们现在还没有创建索引呢！")]),s._v(" "),t("p",[s._v("我们这里以 "),t("code",[s._v("score")]),s._v(" 和 "),t("code",[s._v("name")]),s._v(" 两个字段建立联合索引：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("cus_order"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" id_score_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("score"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("创建完成之后，再用 "),t("code",[s._v("EXPLAIN")]),s._v(" 命令分析再次分析这条 SQL 语句。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://blog-images-luke.oss-cn-shanghai.aliyuncs.com/test/202311032149046.png",alt:"img"}})]),s._v(" "),t("p",[s._v("通过 "),t("code",[s._v("Extra")]),s._v(" 这一列的 "),t("code",[s._v("Using index")]),s._v(" ，说明这条 SQL 语句成功使用了覆盖索引。")]),s._v(" "),t("h3",{attrs:{id:"联合索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#联合索引"}},[s._v("#")]),s._v(" 联合索引")]),s._v(" "),t("p",[s._v("使用表中的多个字段创建索引，就是 "),t("strong",[s._v("联合索引")]),s._v("，也叫 "),t("strong",[s._v("组合索引")]),s._v(" 或 "),t("strong",[s._v("复合索引")]),s._v("。")]),s._v(" "),t("p",[s._v("以 "),t("code",[s._v("score")]),s._v(" 和 "),t("code",[s._v("name")]),s._v(" 两个字段建立联合索引：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("cus_order"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" id_score_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("score"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"最左前缀匹配原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最左前缀匹配原则"}},[s._v("#")]),s._v(" 最左前缀匹配原则")]),s._v(" "),t("p",[s._v("最左前缀匹配原则指的是，在使用联合索引时，"),t("strong",[s._v("MySQL")]),s._v(" 会根据联合索引中的字段顺序，从左到右依次到查询条件中去匹配，如果查询条件中存在与联合索引中最左侧字段相匹配的字段，则就会使用该字段过滤一批数据，直至联合索引中全部字段匹配完成，或者在执行过程中遇到范围查询（如 "),t("strong",[t("code",[s._v(">")])]),s._v("、"),t("strong",[t("code",[s._v("<")])]),s._v(" ）才会停止匹配。对于 "),t("strong",[t("code",[s._v(">=")])]),s._v("、"),t("strong",[t("code",[s._v("<=")])]),s._v("、"),t("strong",[t("code",[s._v("BETWEEN")])]),s._v("、"),t("strong",[t("code",[s._v("like")])]),s._v(" 前缀匹配的范围查询，并不会停止匹配。所以，我们在使用联合索引时，可以将区分度高的字段放在最左边，这也可以过滤更多数据。")]),s._v(" "),t("h2",{attrs:{id:"索引下推"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引下推"}},[s._v("#")]),s._v(" 索引下推")]),s._v(" "),t("p",[t("strong",[s._v("索引下推（Index Condition Pushdown）")]),s._v(" 是 "),t("strong",[s._v("MySQL 5.6")]),s._v(" 版本中提供的一项索引优化功能，可以在非聚簇索引遍历过程中，对索引中包含的字段先做判断，过滤掉不符合条件的记录，减少回表次数。")]),s._v(" "),t("h2",{attrs:{id:"正确使用索引的一些建议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正确使用索引的一些建议"}},[s._v("#")]),s._v(" 正确使用索引的一些建议")]),s._v(" "),t("h3",{attrs:{id:"选择合适的字段创建索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#选择合适的字段创建索引"}},[s._v("#")]),s._v(" 选择合适的字段创建索引")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("不为 NULL 的字段")]),s._v("：索引字段的数据应该尽量不为 NULL，因为对于数据为 NULL 的字段，数据库较难优化。如果字段频繁被查询，但又避免不了为 NULL，建议使用 0,1,true,false 这样语义较为清晰的短值或短字符作为替代。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("被频繁查询的字段")]),s._v("：我们创建索引的字段应该是查询操作非常频繁的字段。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("被作为条件查询的字段")]),s._v("：被作为 WHERE 条件查询的字段，应该被考虑建立索引。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("频繁需要排序的字段")]),s._v("：索引已经排序，这样查询可以利用索引的排序，加快排序查询时间。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("被经常频繁用于连接的字段")]),s._v("：经常用于连接的字段可能是一些外键列，对于外键列并不一定要建立外键，只是说该列涉及到表与表的关系。对于频繁被连接查询的字段，可以考虑建立索引，提高多表连接查询的效率。")])])]),s._v(" "),t("h3",{attrs:{id:"被频繁更新的字段应该慎重建立索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#被频繁更新的字段应该慎重建立索引"}},[s._v("#")]),s._v(" 被频繁更新的字段应该慎重建立索引")]),s._v(" "),t("p",[s._v("虽然索引能带来查询上的效率，但是维护索引的成本也是不小的。 如果一个字段不被经常查询，反而被经常修改，那么就更不应该在这种字段上建立索引了。")]),s._v(" "),t("h3",{attrs:{id:"限制每张表上的索引数量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#限制每张表上的索引数量"}},[s._v("#")]),s._v(" 限制每张表上的索引数量")]),s._v(" "),t("p",[s._v("索引并不是越多越好，建议单张表索引不超过 5 个！索引可以提高效率同样可以降低效率。")]),s._v(" "),t("p",[s._v("索引可以增加查询效率，但同样也会降低插入和更新的效率，甚至有些情况下会降低查询效率。")]),s._v(" "),t("p",[s._v("因为 MySQL 优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划，如果同时有很多个索引都可以用于查询，就会增加 MySQL 优化器生成执行计划的时间，同样会降低查询性能。")]),s._v(" "),t("h3",{attrs:{id:"尽可能的考虑建立联合索引而不是单列索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#尽可能的考虑建立联合索引而不是单列索引"}},[s._v("#")]),s._v(" 尽可能的考虑建立联合索引而不是单列索引")]),s._v(" "),t("p",[s._v("因为索引是需要占用磁盘空间的，可以简单理解为每个索引都对应着一颗 B+树。如果一个表的字段过多，索引过多，那么当这个表的数据达到一个体量后，索引占用的空间也是很多的，且修改索引时，耗费的时间也是较多的。如果是联合索引，多个字段在一个索引上，那么将会节约很大磁盘空间，且修改数据的操作效率也会提升。")]),s._v(" "),t("h3",{attrs:{id:"注意避免冗余索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注意避免冗余索引"}},[s._v("#")]),s._v(" 注意避免冗余索引")]),s._v(" "),t("p",[s._v("冗余索引指的是索引的功能相同，能够命中索引(a, b)就肯定能命中索引(a) ，那么索引(a)就是冗余索引。如（name,city ）和（name ）这两个索引就是冗余索引，能够命中前者的查询肯定是能够命中后者的 在大多数情况下，都应该尽量扩展已有的索引而不是创建新索引。")]),s._v(" "),t("h3",{attrs:{id:"字符串类型的字段使用前缀索引代替普通索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串类型的字段使用前缀索引代替普通索引"}},[s._v("#")]),s._v(" 字符串类型的字段使用前缀索引代替普通索引")]),s._v(" "),t("p",[s._v("前缀索引仅限于字符串类型，较普通索引会占用更小的空间，所以可以考虑使用前缀索引带替普通索引。")]),s._v(" "),t("h3",{attrs:{id:"避免索引失效"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#避免索引失效"}},[s._v("#")]),s._v(" 避免索引失效")]),s._v(" "),t("p",[s._v("索引失效也是慢查询的主要原因之一，常见的导致索引失效的情况有下面这些：")]),s._v(" "),t("ul",[t("li",[t("s",[s._v("使用 SELECT 进行查询;")]),s._v(" "),t("code",[s._v("SELECT *")]),s._v(" 不会直接导致索引失效（如果不走索引大概率是因为 where 查询范围过大导致的），但它可能会带来一些其他的性能问题比如造成网络传输和数据处理的浪费、无法使用索引覆盖;")]),s._v(" "),t("li",[s._v("创建了组合索引，但查询条件未准守最左匹配原则;")]),s._v(" "),t("li",[s._v("在索引列上进行计算、函数、类型转换等操作;")]),s._v(" "),t("li",[s._v("以 % 开头的 LIKE 查询比如 "),t("code",[s._v("LIKE '%abc';")]),s._v(";")]),s._v(" "),t("li",[s._v("查询条件中使用 OR，且 OR 的前后条件中有一个列没有索引，涉及的索引都不会被使用到;")]),s._v(" "),t("li",[s._v("IN 的取值范围较大时会导致索引失效，走全表扫描(NOT IN 和 IN 的失效场景相同);")]),s._v(" "),t("li",[s._v("发生隐式转换；")])]),s._v(" "),t("p",[t("strong",[s._v("参考")])]),s._v(" "),t("ul",[t("li",[s._v("https://javaguide.cn/database/mysql/mysql-logs.html")])])])}),[],!1,null,null,null);t.default=e.exports}}]);